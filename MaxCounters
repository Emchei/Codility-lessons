#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>


struct Results {
	int * C;
	int L;
};


struct Results solution(int N, int A[], int M)
{
	struct Results result;
	result.C = (int*)calloc(N, sizeof(N));
	result.L = N;
	int max_counter = 0;
	int max_temp = 0;
	for (unsigned int i = 0; i < M; ++i)
	{
		if (A[i] > 0 && A[i] <= N)
		{
			/*if (result.C[A[i] - 1] < max_counter)
			{
				result.C[A[i] - 1] = max_counter + 1;
			}
		    else {
				result.C[A[i] - 1] += 1;
			}*/// Alternative form
			result.C[A[i] - 1] = (result.C[A[i] - 1] < max_counter) ? max_counter + 1 : result.C[A[i] - 1] + 1;

			if (max_temp < result.C[A[i] - 1])
			{
				max_temp = result.C[A[i] - 1];
			}
				
		}
		else if (A[i] == result.L + 1)
		{
			max_counter = max_temp;
		}
	}

	for (unsigned int i = 0; i < result.L; ++i)
	{
		if (result.C[i] < max_counter)
		{
			result.C[i] = max_counter;
		}
	}
	return result;
}
int main()
{
	int A[] = { 3, 4, 4, 6, 1, 4, 4 };
	int size_n = sizeof(A) / sizeof(int);
	struct Results ptr = solution(5, A, size_n);
	//val = &val1;
    //ptr = (struct Result*) calloc(5, sizeof(struct Results));
	//(&ptr) = ;
	for (int i = 0; i < 5; i++)
	{
		printf("%d\n", *(&ptr.C[i]));
	}
	
	getchar();
    return 0;
}
